@{
    ViewBag.Title = "Calendar";
}

@section PageStyles {
    <link href="@Url.Content("~/Content/calendar.css")" rel="stylesheet" type="text/css" />
}

@Scripts.Render("~/Scripts/calendar.js")

<aside class="main-sidebar">
    <div class="content">
        <span class="new-btn new-Event">New Event</span>
        
        @(Html.Kendo().Calendar()
            .Name("calendar")
            .Value(new DateTime(2013, 6, 24))
            .Events(e => e.Change("onCalenderChange"))
            .Footer(false)
        )
        <div class="calendar-resources-list">
            <div class="resource presonal selected" data-resource-value="1">Personal</div>
            <div class="resource work" data-resource-value="2">Work</div>
            <div class="resource development" data-resource-value="3">Development</div>
            <div class="resource design" data-resource-value="4">Design</div>
            <div class="resource marketing" data-resource-value="5">Marketing</div>
        </div>
    </div>
    @Html.Partial("SidebarFooter")
</aside>
<section class="main-section">
    <div class="toolbar">
        <span class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" onclick="onExportBtnClick('exportPdf')">Export to PDF <span class="k-icon k-font-icon k-i-file-pdf"></span></span>
        <span class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" onclick="onExportBtnClick('exportImage')">Export to Image <span class="k-icon k-font-icon k-i-image"></span></span>
    </div>
    <div class="inner-section">
        @(Html.Kendo().Scheduler<TelerikMvcWebMail.Models.EventViewModel>()
            .Name("scheduler")
            .Date(new DateTime(2013, 6, 24))
            .Views(views =>
            {
                views.DayView();
                views.WorkWeekView(workWeekView => workWeekView.Selected(true));
                views.WeekView();
                views.MonthView();
                views.AgendaView();
                views.TimelineView();
            })
            .Timezone("Etc/UTC")
            .Selectable(true)
            .DataSource(d => d
                .Model(m =>
                {
                    m.Id(f => f.TaskID);
                    m.Field(f => f.Title).DefaultValue("No title");
                    m.Field(f => f.Category).DefaultValue(1);
                    m.RecurrenceId(f => f.RecurrenceID);
                })
                .Read("Read", "Calendar")
                .Create("Create", "Calendar")
                .Destroy("Destroy", "Calendar")
                .Update("Update", "Calendar")
                .Filter(filters =>
                {
                    filters.Add(model => model.Category)
                        .IsEqualTo(1);
                })
            )
            .Resources(resource =>
            {
                resource.Add(m => m.Category)
                    .Title("Category")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .DataColorField("Color")
                    .BindTo(new[] {
                        new { Text = "Personal", Value = 1, Color = "#6BCC65" } ,
                        new { Text = "Work", Value = 2, Color = "#1E8EDF" } ,
                        new { Text = "Development", Value = 3, Color = "#E155D9" } ,
                        new { Text = "Design", Value = 4, Color = "#DD1C3C" } ,
                        new { Text = "Marketing", Value = 5, Color = "#FFC600" }
                    });
            })
            .Events(e => e.
                Edit("onSchedulerEdit")
                .Change("onSchedulerChange")
            )
        )
    </div>
</section>